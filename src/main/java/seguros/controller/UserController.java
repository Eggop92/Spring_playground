package seguros.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import seguros.beans.UserBean;
import seguros.models.Country;
import seguros.models.User;
import seguros.repositories.CountryRepository;
import seguros.repositories.UserRepository;
import seguros.utils.ListUtils;

import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired 
	private CountryRepository countryRepository;

	@GetMapping()
	public @ResponseBody List<UserBean> getAllUsers() {
		// This returns a JSON or XML with the users
		return UserBean.getBeans(ListUtils.convertToList(userRepository.findAll()));
	}

	@GetMapping(path="/{userId}")
	public @ResponseBody UserBean getUser(@PathVariable("userId") String userId) {
		User u = userRepository.findById(Integer.parseInt(userId)).orElse(null);
		if(u == null) return null;
		return new UserBean(u);
	}

	//@GetMapping(path="/add") // Map ONLY GET Requests == @RequestMapping(method=GET)
	@RequestMapping(method=RequestMethod.POST)
	public @ResponseBody UserBean addNewUser (@RequestParam String name, @RequestParam String email, @RequestParam Integer countryId) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Country c = countryRepository.findById(countryId).orElse(null);
		//if(c == null) return "Country "+countryId+" not found";
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		n.setCountry(c);
		userRepository.save(n);
		return new UserBean(n);
	}

	@RequestMapping(path="/{userId}", method=RequestMethod.PUT)
	public @ResponseBody UserBean updateUser (@PathVariable("userId") String userId, @RequestPart String name, @RequestPart String email, @RequestPart Integer countryId) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User n = userRepository.findById(Integer.parseInt(userId)).orElse(null);
		if(n == null) return null;
		Country c = countryRepository.findById(countryId).orElse(null);
		n.setName(name);
		n.setEmail(email);
		n.setCountry(c);
		userRepository.save(n);
		return new UserBean(n);
	}

	@RequestMapping(path="/{userId}", method=RequestMethod.DELETE)
	public @ResponseBody Boolean deleteUser (@PathVariable("userId") String userId){
		User n = userRepository.findById(Integer.parseInt(userId)).orElse(null);
		if(n== null) return false;
		userRepository.delete(n);
		return true;
	}

}
